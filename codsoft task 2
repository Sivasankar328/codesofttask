<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daily Inspiration</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @keyframes fadeIn {
            0% { opacity: 0; transform: translateY(10px); }
            100% { opacity: 1; transform: translateY(0); }
        }
        .fade-in { animation: fadeIn 0.5s ease forwards; }
        .bg-gradient { background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); }
        .dark .bg-gradient { background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%); }
        .quote-card { transition: all 0.3s ease; }
        .quote-card:hover { transform: translateY(-5px); box-shadow: 0 15px 30px rgba(0,0,0,0.1); }
    </style>
</head>
<body class="bg-gradient min-h-screen transition-colors duration-300 dark:bg-gray-900">
    <div class="container mx-auto px-4 py-12">
        <!-- Header -->
        <header class="flex justify-between items-center mb-12">
            <div>
                <h1 class="text-3xl md:text-4xl font-bold text-gray-800 dark:text-white transition-all duration-300">
                    Daily <span class="text-indigo-600 dark:text-indigo-400">Inspiration</span>
                </h1>
                <p class="text-gray-600 dark:text-gray-300 mt-1">Your daily dose of motivation</p>
            </div>
            <button id="theme-toggle" class="p-2 rounded-full bg-white dark:bg-gray-800 shadow-md hover:shadow-lg transition-all">
                <i class="fas fa-moon text-gray-700 dark:text-yellow-300" id="theme-icon"></i>
            </button>
        </header>

        <div class="max-w-4xl mx-auto">
            <!-- Main Content Tabs -->
            <div class="flex border-b border-gray-200 dark:border-gray-700 mb-8">
                <button class="tab-btn active px-6 py-3 font-medium text-indigo-600 dark:text-indigo-400 border-b-2 border-indigo-600 dark:border-indigo-400 transition-colors" data-tab="today">Today's Quote</button>
                <button class="tab-btn px-6 py-3 font-medium text-gray-500 dark:text-gray-400 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors" data-tab="favorites">Favorites</button>
            </div>

            <!-- Today's Quote Section -->
            <div id="today-tab" class="tab-content">
                <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden quote-card fade-in">
                    <div class="p-8">
                        <div class="flex justify-between items-start">
                            <div>
                                <span class="text-xs uppercase tracking-wider font-semibold text-indigo-600 dark:text-indigo-400">Quote of the day</span>
                                <h3 id="quote-date" class="text-xs text-gray-500 dark:text-gray-400 mt-1"></h3>
                            </div>
                            <div class="flex space-x-2">
                                <button id="refresh-quote" class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="Refresh">
                                    <i class="fas fa-sync-alt text-gray-600 dark:text-gray-300"></i>
                                </button>
                                <button id="favorite-btn" class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="Add to favorites">
                                    <i class="far fa-heart text-gray-600 dark:text-gray-300"></i>
                                </button>
                            </div>
                        </div>
                        <div class="mt-6">
                            <p id="quote-text" class="text-2xl md:text-3xl font-medium text-gray-800 dark:text-white leading-tight transition-colors duration-300"></p>
                            <p id="quote-author" class="text-right mt-4 text-gray-600 dark:text-gray-300 italic transition-colors duration-300"></p>
                        </div>
                    </div>
                    <div class="px-8 py-4 bg-gray-50 dark:bg-gray-700 flex flex-wrap gap-3">
                        <button id="copy-quote" class="flex-1 md:flex-none px-4 py-2 bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 rounded-lg text-gray-700 dark:text-gray-200 font-medium transition-colors">
                            <i class="fas fa-copy mr-2"></i> Copy
                        </button>
                        <button id="share-twitter" class="flex-1 md:flex-none px-4 py-2 bg-blue-100 dark:bg-blue-900 hover:bg-blue-200 dark:hover:bg-blue-800 rounded-lg text-blue-700 dark:text-blue-200 font-medium transition-colors">
                            <i class="fab fa-twitter mr-2"></i> Twitter
                        </button>
                        <button id="share-whatsapp" class="flex-1 md:flex-none px-4 py-2 bg-green-100 dark:bg-green-900 hover:bg-green-200 dark:hover:bg-green-800 rounded-lg text-green-700 dark:text-green-200 font-medium transition-colors">
                            <i class="fab fa-whatsapp mr-2"></i> WhatsApp
                        </button>
                        <button id="share-email" class="flex-1 md:flex-none px-4 py-2 bg-indigo-100 dark:bg-indigo-900 hover:bg-indigo-200 dark:hover:bg-indigo-800 rounded-lg text-indigo-700 dark:text-indigo-200 font-medium transition-colors">
                            <i class="fas fa-envelope mr-2"></i> Email
                        </button>
                    </div>
                </div>

                <div class="mt-12">
                    <img src="https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/43ddad6a-3112-4bff-a937-43361c24a461.png" alt="Inspiring landscape with morning sun rays shining through clouds over a mountain range, with motivational quote overlay" class="w-full rounded-xl shadow-lg" />
                </div>
            </div>

            <!-- Favorites Section -->
            <div id="favorites-tab" class="tab-content hidden">
                <div id="favorites-list" class="grid gap-6">
                    <!-- Favorites will be loaded here -->
                    <div id="no-favorites" class="text-center py-12">
                        <i class="far fa-heart text-5xl text-gray-300 dark:text-gray-600 mb-4"></i>
                        <h3 class="text-xl font-medium text-gray-700 dark:text-gray-300">No favorites yet</h3>
                        <p class="text-gray-500 dark:text-gray-400 mt-2">Your starred quotes will appear here</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="fixed bottom-4 right-4 px-6 py-3 bg-gray-800 text-white rounded-lg shadow-xl transform translate-y-10 opacity-0 transition-all duration-300 flex items-center">
        <span id="toast-message"></span>
        <button id="toast-close" class="ml-4">
            <i class="fas fa-times"></i>
        </button>
    </div>

    <script>
        // Quotes database
        const quotes = [
            {
                text: "The only way to do great work is to love what you do.",
                author: "Steve Jobs",
                tags: ["work", "passion"]
            },
            {
                text: "Life is what happens when you're busy making other plans.",
                author: "John Lennon",
                tags: ["life", "plans"]
            },
            {
                text: "In the middle of every difficulty lies opportunity.",
                author: "Albert Einstein",
                tags: ["difficulty", "opportunity"]
            },
            {
                text: "The future belongs to those who believe in the beauty of their dreams.",
                author: "Eleanor Roosevelt",
                tags: ["future", "dreams"]
            },
            {
                text: "Success is not final, failure is not fatal: It is the courage to continue that counts.",
                author: "Winston Churchill",
                tags: ["success", "failure", "perseverance"]
            },
            {
                text: "Happiness is not something ready made. It comes from your own actions.",
                author: "Dalai Lama",
                tags: ["happiness", "actions"]
            },
            {
                text: "Do not watch the clock. Do what it does. Keep going.",
                author: "Sam Levenson",
                tags: ["time", "persistence"]
            },
            {
                text: "Your time is limited, so don't waste it living someone else's life.",
                author: "Steve Jobs",
                tags: ["time", "authenticity"]
            }
        ];

        // DOM Elements
        const quoteText = document.getElementById('quote-text');
        const quoteAuthor = document.getElementById('quote-author');
        const quoteDate = document.getElementById('quote-date');
        const refreshBtn = document.getElementById('refresh-quote');
        const favoriteBtn = document.getElementById('favorite-btn');
        const copyBtn = document.getElementById('copy-quote');
        const shareTwitterBtn = document.getElementById('share-twitter');
        const shareWhatsappBtn = document.getElementById('share-whatsapp');
        const shareEmailBtn = document.getElementById('share-email');
        const themeToggle = document.getElementById('theme-toggle');
        const themeIcon = document.getElementById('theme-icon');
        const toast = document.getElementById('toast');
        const toastMessage = document.getElementById('toast-message');
        const toastClose = document.getElementById('toast-close');
        const tabBtns = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');
        const favoritesList = document.getElementById('favorites-list');
        const noFavorites = document.getElementById('no-favorites');

        // State
        let currentQuote = null;
        let favorites = JSON.parse(localStorage.getItem('favorites')) || [];

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            checkDarkMode();
            setQuoteOfTheDay();
            loadFavorites();
            
            // Set current date
            const today = new Date();
            quoteDate.textContent = today.toLocaleDateString('en-US', { 
                weekday: 'long', 
                month: 'long', 
                day: 'numeric', 
                year: 'numeric' 
            });
        });

        // Get a random quote
        function getRandomQuote() {
            return quotes[Math.floor(Math.random() * quotes.length)];
        }

        // Set quote of the day (persists for the day)
        function setQuoteOfTheDay() {
            const today = new Date().toDateString();
            const lastQuoteDate = localStorage.getItem('lastQuoteDate');
            let savedQuote = JSON.parse(localStorage.getItem('dailyQuote'));
            
            if (lastQuoteDate !== today || !savedQuote) {
                const newQuote = getRandomQuote();
                localStorage.setItem('dailyQuote', JSON.stringify(newQuote));
                localStorage.setItem('lastQuoteDate', today);
                displayQuote(newQuote, true);
            } else {
                displayQuote(savedQuote, isQuoteFavorite(savedQuote));
            }
        }

        // Display quote
        function displayQuote(quote, isFavorite = false) {
            currentQuote = quote;
            quoteText.textContent = quote.text;
            quoteAuthor.textContent = `— ${quote.author}`;
            
            // Update favorite button
            if (isFavorite) {
                favoriteBtn.innerHTML = '<i class="fas fa-heart text-red-500"></i>';
                favoriteBtn.setAttribute('title', 'Remove from favorites');
            } else {
                favoriteBtn.innerHTML = '<i class="far fa-heart text-gray-600 dark:text-gray-300"></i>';
                favoriteBtn.setAttribute('title', 'Add to favorites');
            }
            
            // Add fade animation to quote elements
            quoteText.classList.add('fade-in');
            quoteAuthor.classList.add('fade-in');
            setTimeout(() => {
                quoteText.classList.remove('fade-in');
                quoteAuthor.classList.remove('fade-in');
            }, 500);
        }

        // Check if quote is in favorites
        function isQuoteFavorite(quote) {
            return favorites.some(fav => 
                fav.text === quote.text && fav.author === quote.author
            );
        }

        // Toggle favorite status
        function toggleFavorite() {
            if (!currentQuote) return;
            
            if (isQuoteFavorite(currentQuote)) {
                // Remove from favorites
                favorites = favorites.filter(fav => 
                    !(fav.text === currentQuote.text && fav.author === currentQuote.author)
                );
                favoriteBtn.innerHTML = '<i class="far fa-heart text-gray-600 dark:text-gray-300"></i>';
                favoriteBtn.setAttribute('title', 'Add to favorites');
                showToast('Removed from favorites');
            } else {
                // Add to favorites
                favorites.push(currentQuote);
                favoriteBtn.innerHTML = '<i class="fas fa-heart text-red-500"></i>';
                favoriteBtn.setAttribute('title', 'Remove from favorites');
                showToast('Added to favorites');
            }
            
            // Update local storage and favorites list
            localStorage.setItem('favorites', JSON.stringify(favorites));
            loadFavorites();
        }

        // Load favorites into UI
        function loadFavorites() {
            if (favorites.length === 0) {
                noFavorites.style.display = 'block';
                return;
            }
            
            noFavorites.style.display = 'none';
            favoritesList.innerHTML = '';
            
            favorites.forEach((quote, index) => {
                const quoteElement = document.createElement('div');
                quoteElement.className = 'bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden quote-card fade-in';
                quoteElement.innerHTML = `
                    <div class="p-6">
                        <div class="flex justify-end mb-2">
                            <button class="remove-favorite p-2 text-gray-400 hover:text-red-500" data-index="${index}" title="Remove from favorites">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <p class="text-xl font-medium text-gray-800 dark:text-white">${quote.text}</p>
                        <p class="text-right mt-4 text-gray-600 dark:text-gray-300 italic">— ${quote.author}</p>
                    </div>
                    <div class="px-6 py-3 bg-gray-50 dark:bg-gray-700 flex justify-end">
                        <button class="share-favorite px-4 py-1.5 bg-indigo-100 dark:bg-indigo-900 hover:bg-indigo-200 dark:hover:bg-indigo-800 rounded-lg text-indigo-700 dark:text-indigo-200 font-medium text-sm transition-colors" data-index="${index}">
                            <i class="fas fa-share-alt mr-1"></i> Share
                        </button>
                    </div>
                `;
                favoritesList.appendChild(quoteElement);
            });
        }

        // Show toast notification
        function showToast(message) {
            toastMessage.textContent = message;
            toast.classList.remove('translate-y-10', 'opacity-0');
            toast.classList.add('translate-y-0', 'opacity-100');
            
            setTimeout(() => {
                toast.classList.remove('translate-y-0', 'opacity-100');
                toast.classList.add('translate-y-10', 'opacity-0');
            }, 3000);
        }

        // Copy quote to clipboard
        function copyQuote() {
            if (!currentQuote) return;
            
            const textToCopy = `${currentQuote.text} —${currentQuote.author}`;
            navigator.clipboard.writeText(textToCopy).then(() => {
                showToast('Quote copied to clipboard!');
            });
        }

        // Share functions
        function shareOnTwitter() {
            if (!currentQuote) return;
            const text = encodeURIComponent(`${currentQuote.text} —${currentQuote.author}`);
            window.open(`https://twitter.com/intent/tweet?text=${text}`, '_blank');
        }

        function shareOnWhatsapp() {
            if (!currentQuote) return;
            const text = encodeURIComponent(`${currentQuote.text} —${currentQuote.author}`);
            window.open(`https://wa.me/?text=${text}`, '_blank');
        }

        function shareViaEmail() {
            if (!currentQuote) return;
            const subject = 'Inspiring Quote';
            const body = encodeURIComponent(`${currentQuote.text}\n\n—${currentQuote.author}\n\nShared from Daily Inspiration`);
            window.open(`mailto:?subject=${subject}&body=${body}`);
        }

        // Theme toggle
        function checkDarkMode() {
            if (localStorage.getItem('darkMode') === 'enabled') {
                document.documentElement.classList.add('dark');
                themeIcon.classList.replace('fa-moon', 'fa-sun');
            } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                document.documentElement.classList.add('dark');
                themeIcon.classList.replace('fa-moon', 'fa-sun');
            }
        }

        function toggleDarkMode() {
            if (document.documentElement.classList.contains('dark')) {
                document.documentElement.classList.remove('dark');
                localStorage.setItem('darkMode', 'disabled');
                themeIcon.classList.replace('fa-sun', 'fa-moon');
            } else {
                document.documentElement.classList.add('dark');
                localStorage.setItem('darkMode', 'enabled');
                themeIcon.classList.replace('fa-moon', 'fa-sun');
            }
        }

        // Tab switching
        function switchTab(evt) {
            const tabName = evt.target.getAttribute('data-tab');
            
            // Update active tab button
            tabBtns.forEach(btn => {
                btn.classList.remove('active', 'text-indigo-600', 'dark:text-indigo-400', 'border-indigo-600', 'dark:border-indigo-400');
                btn.classList.add('text-gray-500', 'dark:text-gray-400');
            });
            evt.target.classList.add('active', 'text-indigo-600', 'dark:text-indigo-400', 'border-indigo-600', 'dark:border-indigo
