<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Todo List App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .priority-high {
            border-left: 4px solid #ef4444;
        }
        .priority-medium {
            border-left: 4px solid #f59e0b;
        }
        .priority-low {
            border-left: 4px solid #10b981;
        }
        .completed {
            text-decoration: line-through;
            opacity: 0.7;
        }
        .fade-in {
            animation: fadeIn 0.3s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .modal-overlay {
            background-color: rgba(0, 0, 0, 0.5);
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8 max-w-2xl">
        <header class="mb-8">
            <h1 class="text-3xl font-bold text-indigo-700 flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                    <polyline points="14 2 14 8 20 8"></polyline>
                    <line x1="16" y1="13" x2="8" y2="13"></line>
                    <line x1="16" y1="17" x2="8" y2="17"></line>
                    <polyline points="10 9 9 9 8 9"></polyline>
                </svg>
                TaskMaster Pro
            </h1>
            <p class="text-gray-600">Organize your life one task at a time</p>
        </header>

        <div class="mb-6 flex items-center justify-between gap-4">
            <button id="add-task-btn" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md flex items-center gap-2 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <line x1="5" y1="12" x2="19" y2="12"></line>
                </svg>
                Add Task
            </button>
            <div class="flex items-center gap-2">
                <select id="filter-status" class="border rounded-md px-3 py-2 text-sm">
                    <option value="all">All Tasks</option>
                    <option value="active">Active</option>
                    <option value="completed">Completed</option>
                </select>
                <select id="filter-priority" class="border rounded-md px-3 py-2 text-sm">
                    <option value="all">Any Priority</option>
                    <option value="high">High</option>
                    <option value="medium">Medium</option>
                    <option value="low">Low</option>
                </select>
            </div>
        </div>

        <div id="task-list" class="space-y-3">
            <!-- Tasks will be dynamically inserted here -->
        </div>

        <div id="no-tasks" class="flex flex-col items-center justify-center py-12 text-center">
            <img src="https://placehold.co/300x200" alt="Illustration of a clipboard with checkmarks and a pencil, indicating an empty task list" class="mb-4 rounded-lg shadow-sm">
            <h3 class="text-xl font-medium text-gray-700 mb-2">No tasks yet</h3>
            <p class="text-gray-500 max-w-md">Add your first task by clicking the "Add Task" button above</p>
        </div>

        <!-- Add Task Modal -->
        <div id="task-modal" class="fixed inset-0 z-50 items-center justify-center hidden modal-overlay">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 fade-in">
                <div class="p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-gray-900" id="modal-title">Add New Task</h3>
                        <button id="close-modal" class="text-gray-400 hover:text-gray-500">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <line x1="18" y1="6" x2="6" y2="18"></line>
                                <line x1="6" y1="6" x2="18" y2="18"></line>
                            </svg>
                        </button>
                    </div>
                    <form id="task-form">
                        <input type="hidden" id="task-id" value="">
                        <div class="mb-4">
                            <label for="task-title" class="block text-sm font-medium text-gray-700 mb-1">Title*</label>
                            <input type="text" id="task-title" required class="w-full border rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-indigo-500">
                        </div>
                        <div class="mb-4">
                            <label for="task-description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                            <textarea id="task-description" rows="3" class="w-full border rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-indigo-500"></textarea>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Priority</label>
                            <div class="flex gap-2">
                                <label class="flex items-center">
                                    <input type="radio" name="priority" value="high" class="mr-1">
                                    <span class="text-red-500">High</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="radio" name="priority" value="medium" checked class="mr-1">
                                    <span class="text-yellow-500">Medium</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="radio" name="priority" value="low" class="mr-1">
                                    <span class="text-green-500">Low</span>
                                </label>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="due-date" class="block text-sm font-medium text-gray-700 mb-1">Due Date</label>
                            <input type="date" id="due-date" class="border rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-indigo-500">
                        </div>
                        <div class="flex justify-end gap-2">
                            <button type="button" id="cancel-task" class="px-4 py-2 rounded-md border text-gray-700 hover:bg-gray-100 transition-colors">Cancel</button>
                            <button type="submit" class="px-4 py-2 rounded-md bg-indigo-600 text-white hover:bg-indigo-700 transition-colors">Save Task</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Delete Confirmation Modal -->
        <div id="delete-modal" class="fixed inset-0 z-50 items-center justify-center hidden modal-overlay">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 fade-in">
                <div class="p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-gray-900">Confirm Deletion</h3>
                        <button id="close-delete-modal" class="text-gray-400 hover:text-gray-500">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <line x1="18" y1="6" x2="6" y2="18"></line>
                                <line x1="6" y1="6" x2="18" y2="18"></line>
                            </svg>
                        </button>
                    </div>
                    <p class="mb-6 text-gray-700">Are you sure you want to delete this task? This action cannot be undone.</p>
                    <div class="flex justify-end gap-2">
                        <button id="cancel-delete" class="px-4 py-2 rounded-md border text-gray-700 hover:bg-gray-100 transition-colors">Cancel</button>
                        <button id="confirm-delete" class="px-4 py-2 rounded-md bg-red-600 text-white hover:bg-red-700 transition-colors">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // DOM elements
            const taskList = document.getElementById('task-list');
            const noTasksEl = document.getElementById('no-tasks');
            const addTaskBtn = document.getElementById('add-task-btn');
            const taskModal = document.getElementById('task-modal');
            const closeModal = document.getElementById('close-modal');
            const cancelTaskBtn = document.getElementById('cancel-task');
            const taskForm = document.getElementById('task-form');
            const filterStatus = document.getElementById('filter-status');
            const filterPriority = document.getElementById('filter-priority');
            const deleteModal = document.getElementById('delete-modal');
            const cancelDeleteBtn = document.getElementById('cancel-delete');
            const confirmDeleteBtn = document.getElementById('confirm-delete');
            const closeDeleteModal = document.getElementById('close-delete-modal');

            // State
            let tasks = JSON.parse(localStorage.getItem('tasks')) || [];
            let taskToDelete = null;

            // Initialize
            renderTasks();

            // Event listeners
            addTaskBtn.addEventListener('click', openTaskModal);
            closeModal.addEventListener('click', closeModalHandler);
            cancelTaskBtn.addEventListener('click', closeModalHandler);
            taskForm.addEventListener('submit', handleTaskSubmit);
            filterStatus.addEventListener('change', renderTasks);
            filterPriority.addEventListener('change', renderTasks);
            cancelDeleteBtn.addEventListener('click', closeDeleteModalHandler);
            confirmDeleteBtn.addEventListener('click', confirmDeleteTask);
            closeDeleteModal.addEventListener('click', closeDeleteModalHandler);

            // Functions
            function renderTasks() {
                const statusFilter = filterStatus.value;
                const priorityFilter = filterPriority.value;
                
                let filteredTasks = tasks.filter(task => {
                    if (statusFilter === 'active') return !task.completed;
                    if (statusFilter === 'completed') return task.completed;
                    return true;
                });
                
                if (priorityFilter !== 'all') {
                    filteredTasks = filteredTasks.filter(task => task.priority === priorityFilter);
                }

                if (filteredTasks.length === 0) {
                    taskList.innerHTML = '';
                    noTasksEl.classList.remove('hidden');
                    return;
                }

                noTasksEl.classList.add('hidden');
                taskList.innerHTML = filteredTasks.map(task => `
                    <div class="bg-white rounded-lg shadow-sm overflow-hidden ${task.completed ? 'opacity-80' : ''} priority-${task.priority}">
                        <div class="p-4">
                            <div class="flex items-start justify-between gap-2">
                                <div class="flex items-start gap-3 flex-grow">
                                    <button class="toggle-complete mt-1 ${task.completed ? 'text-green-500' : 'text-gray-300'}" data-id="${task.id}">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                            <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                        </svg>
                                    </button>
                                    <div class="flex-grow">
                                        <h3 class="${task.completed ? 'completed text-gray-500' : 'text-gray-800'} font-medium">${task.title}</h3>
                                        ${task.description ? `<p class="text-sm mt-1 ${task.completed ? 'text-gray-400' : 'text-gray-600'}">${task.description}</p>` : ''}
                                        ${task.dueDate ? `<p class="text-xs mt-2 ${task.completed ? 'text-gray-400' : 'text-gray-500'}">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="inline-block mr-1">
                                                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                                                <line x1="16" y1="2" x2="16" y2="6"></line>
                                                <line x1="8" y1="2" x2="8" y2="6"></line>
                                                <line x1="3" y1="10" x2="21" y2="10"></line>
                                            </svg>
                                            Due: ${formatDate(task.dueDate)}
                                        </p>` : ''}
                                    </div>
                                </div>
                                <div class="flex gap-1">
                                    <button class="edit-task p-1 text-gray-500 hover:text-indigo-600 transition-colors" data-id="${task.id}">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                            <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                        </svg>
                                    </button>
                                    <button class="delete-task p-1 text-gray-500 hover:text-red-600 transition-colors" data-id="${task.id}">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <polyline points="3 6 5 6 21 6"></polyline>
                                            <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                                            <line x1="10" y1="11" x2="10" y2="17"></line>
                                            <line x1="14" y1="11" x2="14" y2="17"></line>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            <div class="mt-3 flex items-center justify-end gap-2 text-xs">
                                <span class="px-2 py-1 rounded-full ${getPriorityColorClass(task.priority)}">
                                    ${getPriorityText(task.priority)}
                                </span>
                            </div>
                        </div>
                    </div>
                `).join('');

                // Add event listeners to interactive elements
                document.querySelectorAll('.toggle-complete').forEach(btn => {
                    btn.addEventListener('click', toggleTaskComplete);
                });

                document.querySelectorAll('.edit-task').forEach(btn => {
                    btn.addEventListener('click', editTask);
                });

                document.querySelectorAll('.delete-task').forEach(btn => {
                    btn.addEventListener('click', openDeleteModal);
                });
            }

            function openTaskModal(editId = null) {
                const modalTitle = document.getElementById('modal-title');
                const taskTitle = document.getElementById('task-title');
                const taskDescription = document.getElementById('task-description');
                const priorityRadios = document.getElementsByName('priority');
                const dueDate = document.getElementById('due-date');
                const taskId = document.getElementById('task-id');

                if (editId) {
                    const task = tasks.find(t => t.id === editId);
                    modalTitle.textContent = 'Edit Task';
                    taskTitle.value = task.title;
                    taskDescription.value = task.description || '';
                    taskId.value = task.id;
                    
                    for (let radio of priorityRadios) {
                        if (radio.value === task.priority) {
                            radio.checked = true;
                            break;
                        }
                    }
                    
                    dueDate.value = task.dueDate || '';
                } else {
                    modalTitle.textContent = 'Add New Task';
                    taskTitle.value = '';
                    taskDescription.value = '';
                    taskId.value = '';
                    priorityRadios[1].checked = true; // Default to medium priority
                    dueDate.value = '';
                }

                taskModal.classList.remove('hidden');
                document.body.classList.add('overflow-hidden');
            }

            function closeModalHandler() {
                taskModal.classList.add('hidden');
                document.body.classList.remove('overflow-hidden');
            }

            function closeDeleteModalHandler() {
                deleteModal.classList.add('hidden');
                document.body.classList.remove('overflow-hidden');
                taskToDelete = null;
            }

            function handleTaskSubmit(e) {
                e.preventDefault();
                
                const taskId = document.getElementById('task-id').value;
                const title = document.getElementById('task-title').value;
                const description = document.getElementById('task-description').value;
                const priority = document.querySelector('input[name="priority"]:checked').value;
                const dueDate = document.getElementById('due-date').value;
                
                if (taskId) {
                    // Edit existing task
                    const index = tasks.findIndex(t => t.id === taskId);
                    if (index !== -1) {
                        tasks[index] = {
                            ...tasks[index],
                            title,
                            description,
                            priority,
                            dueDate
                        };
                    }
                } else {
                    // Add new task
                    const newTask = {
                        id: Date.now().toString(),
                        title,
                        description,
                        priority,
                        dueDate,
                        completed: false,
                        createdAt: new Date().toISOString()
                    };
                    tasks.unshift(newTask);
                }

                saveTasks();
                renderTasks();
                closeModalHandler();
            }

            function toggleTaskComplete(e) {
                const taskId = e.currentTarget.dataset.id;
                const index = tasks.findIndex(t => t.id === taskId);
                
                if (index !== -1) {
                    tasks[index].completed = !tasks[index].completed;
                    saveTasks();
                    renderTasks();
                }
            }

            function editTask(e) {
                const taskId = e.currentTarget.dataset.id;
                openTaskModal(taskId);
            }

            function openDeleteModal(e) {
                taskToDelete = e.currentTarget.dataset.id;
                deleteModal.classList.remove('hidden');
                document.body.classList.add('overflow-hidden');
            }

            function confirmDeleteTask() {
                if (taskToDelete) {
                    tasks = tasks.filter(task => task.id !== taskToDelete);
                    saveTasks();
                    renderTasks();
                }
                closeDeleteModalHandler();
            }

            function saveTasks() {
                localStorage.setItem('tasks', JSON.stringify(tasks));
            }

            function formatDate(dateString) {
                const options = { year: 'numeric', month: 'short', day: 'numeric' };
                return new Date(dateString).toLocaleDateString(undefined, options);
            }

            function getPriorityColorClass(priority) {
                switch (priority) {
                    case 'high': return 'bg-red-100 text-red-800';
                    case 'medium': return 'bg-yellow-100 text-yellow-800';
                    case 'low': return 'bg-green-100 text-green-800';
                    default: return 'bg-gray-100 text-gray-800';
                }
            }

            function getPriorityText(priority) {
                switch (priority) {
                    case 'high': return 'High Priority';
                    case 'medium': return 'Medium Priority';
                    case 'low': return 'Low Priority';
                    default: return '';
                }
            }
        });
    </script>
</body>
</html>
